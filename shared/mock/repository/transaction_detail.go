// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/transaction_detail.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	transactiondetail "github.com/daniwira/multifinance/internal/domain/transaction_detail"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionDetailRepository is a mock of TransactionDetailRepository interface.
type MockTransactionDetailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionDetailRepositoryMockRecorder
}

// MockTransactionDetailRepositoryMockRecorder is the mock recorder for MockTransactionDetailRepository.
type MockTransactionDetailRepositoryMockRecorder struct {
	mock *MockTransactionDetailRepository
}

// NewMockTransactionDetailRepository creates a new mock instance.
func NewMockTransactionDetailRepository(ctrl *gomock.Controller) *MockTransactionDetailRepository {
	mock := &MockTransactionDetailRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionDetailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionDetailRepository) EXPECT() *MockTransactionDetailRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionDetailRepository) Create(transaction *transactiondetail.TransactionDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionDetailRepositoryMockRecorder) Create(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionDetailRepository)(nil).Create), transaction)
}

// Delete mocks base method.
func (m *MockTransactionDetailRepository) Delete(transaction *transactiondetail.TransactionDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionDetailRepositoryMockRecorder) Delete(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransactionDetailRepository)(nil).Delete), transaction)
}

// FindByID mocks base method.
func (m *MockTransactionDetailRepository) FindByID(id uint) (*transactiondetail.TransactionDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*transactiondetail.TransactionDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTransactionDetailRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTransactionDetailRepository)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockTransactionDetailRepository) Update(transaction *transactiondetail.TransactionDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionDetailRepositoryMockRecorder) Update(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionDetailRepository)(nil).Update), transaction)
}
