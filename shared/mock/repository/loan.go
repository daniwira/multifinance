// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/loan.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	loan "github.com/daniwira/multifinance/internal/domain/loan"
	gomock "go.uber.org/mock/gomock"
)

// MockLoanRepository is a mock of LoanRepository interface.
type MockLoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepositoryMockRecorder
}

// MockLoanRepositoryMockRecorder is the mock recorder for MockLoanRepository.
type MockLoanRepositoryMockRecorder struct {
	mock *MockLoanRepository
}

// NewMockLoanRepository creates a new mock instance.
func NewMockLoanRepository(ctrl *gomock.Controller) *MockLoanRepository {
	mock := &MockLoanRepository{ctrl: ctrl}
	mock.recorder = &MockLoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepository) EXPECT() *MockLoanRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoanRepository) Create(loan *loan.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLoanRepositoryMockRecorder) Create(loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoanRepository)(nil).Create), loan)
}

// Delete mocks base method.
func (m *MockLoanRepository) Delete(loan *loan.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLoanRepositoryMockRecorder) Delete(loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoanRepository)(nil).Delete), loan)
}

// FindByCustomerID mocks base method.
func (m *MockLoanRepository) FindByCustomerID(customerID uint) (*loan.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCustomerID", customerID)
	ret0, _ := ret[0].(*loan.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCustomerID indicates an expected call of FindByCustomerID.
func (mr *MockLoanRepositoryMockRecorder) FindByCustomerID(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCustomerID", reflect.TypeOf((*MockLoanRepository)(nil).FindByCustomerID), customerID)
}

// FindByID mocks base method.
func (m *MockLoanRepository) FindByID(id uint) (*loan.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*loan.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockLoanRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLoanRepository)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockLoanRepository) Update(loan *loan.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLoanRepositoryMockRecorder) Update(loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoanRepository)(nil).Update), loan)
}
