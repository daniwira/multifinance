// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/customer_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domaincustomer "github.com/daniwira/multifinance/internal/domain/customer"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerRepository) CreateCustomer(customer domaincustomer.Customer) (*domaincustomer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", customer)
	ret0, _ := ret[0].(*domaincustomer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerRepositoryMockRecorder) CreateCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).CreateCustomer), customer)
}

// DeleteCustomer mocks base method.
func (m *MockCustomerRepository) DeleteCustomer(customer *domaincustomer.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomer", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomer indicates an expected call of DeleteCustomer.
func (mr *MockCustomerRepositoryMockRecorder) DeleteCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).DeleteCustomer), customer)
}

// GetCustomer mocks base method.
func (m *MockCustomerRepository) GetCustomer(id string) (*domaincustomer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomer", id)
	ret0, _ := ret[0].(*domaincustomer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomer(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomer), id)
}

// GetCustomers mocks base method.
func (m *MockCustomerRepository) GetCustomers() ([]domaincustomer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomers")
	ret0, _ := ret[0].([]domaincustomer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomers indicates an expected call of GetCustomers.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomers", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomers))
}

// UpdateCustomer mocks base method.
func (m *MockCustomerRepository) UpdateCustomer(customer *domaincustomer.Customer) (*domaincustomer.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomer", customer)
	ret0, _ := ret[0].(*domaincustomer.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCustomer indicates an expected call of UpdateCustomer.
func (mr *MockCustomerRepositoryMockRecorder) UpdateCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomer", reflect.TypeOf((*MockCustomerRepository)(nil).UpdateCustomer), customer)
}
