// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/limit_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domainlimit "github.com/daniwira/multifinance/internal/domain/limit"
	gomock "go.uber.org/mock/gomock"
)

// MockLimitRepository is a mock of LimitRepository interface.
type MockLimitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLimitRepositoryMockRecorder
}

// MockLimitRepositoryMockRecorder is the mock recorder for MockLimitRepository.
type MockLimitRepositoryMockRecorder struct {
	mock *MockLimitRepository
}

// NewMockLimitRepository creates a new mock instance.
func NewMockLimitRepository(ctrl *gomock.Controller) *MockLimitRepository {
	mock := &MockLimitRepository{ctrl: ctrl}
	mock.recorder = &MockLimitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimitRepository) EXPECT() *MockLimitRepositoryMockRecorder {
	return m.recorder
}

// CreateLimit mocks base method.
func (m *MockLimitRepository) CreateLimit(limit domainlimit.Limit) (*domainlimit.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLimit", limit)
	ret0, _ := ret[0].(*domainlimit.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLimit indicates an expected call of CreateLimit.
func (mr *MockLimitRepositoryMockRecorder) CreateLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLimit", reflect.TypeOf((*MockLimitRepository)(nil).CreateLimit), limit)
}

// DeleteLimit mocks base method.
func (m *MockLimitRepository) DeleteLimit(limit *domainlimit.Limit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLimit", limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLimit indicates an expected call of DeleteLimit.
func (mr *MockLimitRepositoryMockRecorder) DeleteLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLimit", reflect.TypeOf((*MockLimitRepository)(nil).DeleteLimit), limit)
}

// FindByCustomerID mocks base method.
func (m *MockLimitRepository) FindByCustomerID(customerID uint) (*domainlimit.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCustomerID", customerID)
	ret0, _ := ret[0].(*domainlimit.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCustomerID indicates an expected call of FindByCustomerID.
func (mr *MockLimitRepositoryMockRecorder) FindByCustomerID(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCustomerID", reflect.TypeOf((*MockLimitRepository)(nil).FindByCustomerID), customerID)
}

// GetLimit mocks base method.
func (m *MockLimitRepository) GetLimit(id string) (*domainlimit.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimit", id)
	ret0, _ := ret[0].(*domainlimit.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimit indicates an expected call of GetLimit.
func (mr *MockLimitRepositoryMockRecorder) GetLimit(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimit", reflect.TypeOf((*MockLimitRepository)(nil).GetLimit), id)
}

// GetLimits mocks base method.
func (m *MockLimitRepository) GetLimits() ([]domainlimit.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimits")
	ret0, _ := ret[0].([]domainlimit.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimits indicates an expected call of GetLimits.
func (mr *MockLimitRepositoryMockRecorder) GetLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimits", reflect.TypeOf((*MockLimitRepository)(nil).GetLimits))
}

// UpdateLimit mocks base method.
func (m *MockLimitRepository) UpdateLimit(limit *domainlimit.Limit) (*domainlimit.Limit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLimit", limit)
	ret0, _ := ret[0].(*domainlimit.Limit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLimit indicates an expected call of UpdateLimit.
func (mr *MockLimitRepositoryMockRecorder) UpdateLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLimit", reflect.TypeOf((*MockLimitRepository)(nil).UpdateLimit), limit)
}
